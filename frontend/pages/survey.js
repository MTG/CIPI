import Head from 'next/head';
import { useRouter } from 'next/router';
import { useState, useEffect } from 'react';
import { useContext, createContext } from 'react';
import { AuthContext } from '@/contexts/AuthContext';
import { API_HOST } from '@/config';
import Link from 'next/link'
import { Footer } from '../components/Footer';

const questions = [
  {
    question: 'Years of experience playing the piano',
    answers: ['Less than 1 year', '1-2 years', '3-5 years', '5-10 years', 'More than 10 years'],
  },
  {
    question: 'Rate the difficulty of the following piece',
    answers: ['Very easy', 'Easy', 'My level', 'Hard', 'Very hard'],
    image: '/LyricalPiece_Beyer.png',
  },
  {
    question: 'Rate the difficulty of the following piece',
    answers: ['Very easy', 'Easy', 'My level', 'Hard', 'Very hard'],
    image: '/Chopin_WaltzinAminor.png',
  },
  {
    question: 'Rate the difficulty of the following piece',
    answers: ['Very easy', 'Easy', 'My level', 'Hard', 'Very hard'],
    image: '/Chopin_Polonaise-fantaisie.png',
  },
];

const sendSurvey = async (credential, answers) => {
  const formData = new FormData();

  const response = await fetch(`${API_HOST}/api/user`, 
    {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authentication: `Bearer ${credential}`
      },
      body:  JSON.stringify({ answers })
    }
  );
  const data = await response.json();
  return data;
}

export default function Home() {
  const router = useRouter();
  const {credential} = useContext(AuthContext);
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [selectedAnswer, setSelectedAnswer] = useState('');
  const [surveyAnswers, setSurveyAnswers] = useState([]);


  const handleAnswerSelect = (answer) => {
    setSelectedAnswer(answer);
  };

  const handleNextClick = async () => {
    if (selectedAnswer !== '') {
      // Save the user's answer
      const answer = {
        question: questions[currentQuestion].question,
        answer: selectedAnswer,
      };
      setSurveyAnswers((prevAnswers) => [...prevAnswers, answer]);
      
      if (currentQuestion === questions.length - 1) {
        const response = await sendSurvey(credential, [...surveyAnswers, answer]);
        router.back();

      } else {
        // Go to the next question
        setCurrentQuestion(currentQuestion + 1);
        setSelectedAnswer('');
      }
    }
  };

  const handleStartSurveyClick = () => {
    setCurrentQuestion(0);
  };


  return (
      <>
        <Head>
         <title>Can I Play It?</title>
         <meta name="description" content="Generated by create next app" />
         <meta name="viewport" content="width=device-width, initial-scale=1" />
         <link rel="icon" href="/favicon.png" />
        </Head>
        <main className="min-h-screen flex flex-col w-screen h-screen overflow-hidden p-4 overflow-hidden relative">
        <div className="flex pb-4">
          <div className="font-bold text-gray-600 flex-1 text-center"><Link href="/">CIPI</Link></div>
        </div>
        <div className="flex items-center justify-center pt-40">
          <div className="border border-neutral-950 rounded-lg p-4 flex flex-col lg:flex-row">
            <div className="w-full lg:w-1/2 pr-4">
              <h1 className="text-xl font-bold mb-4">
                {questions[currentQuestion].question}
              </h1>
              <ul className="mb-4">
                {questions[currentQuestion].answers.map((answer, index) => (
                  <li key={index}>
                    <label className="flex items-center">
                      <input
                        type="radio"
                        name="answer"
                        value={answer}
                        checked={selectedAnswer === answer}
                        onChange={() => handleAnswerSelect(answer)}
                        className="mr-2 cursor-pointer" />
                      {answer}
                    </label>
                  </li>
                ))}
              </ul>
              <div className="flex flex-row-reverse flex-col">
                <button
                  onClick={handleNextClick}
                  disabled={selectedAnswer === ''}
                  className=" px-4 py-2 bg-black text-white rounded disabled:bg-gray-400 disabled:cursor-not-allowed"
                >
                  {currentQuestion === questions.length - 1 ? 'Finish' : 'Next'}
                </button>
              </div>
            </div>
            <div className="w-full lg:w-1/2 flex items-center justify-center">
              {questions[currentQuestion].image && (
                <img
                  src={questions[currentQuestion].image}
                  alt="Question Image"
                  className="mb-4 max-w-full max-h-64 object-contain" />
              )}
            </div>
          </div>
        </div>
        <div className="flex justify-center pt-10 mb-4 text-sm text-gray-600">
          This survey is designed to gather information about our users. Your responses will help us better understand your piano experience and preferences.
        </div>
        </main>
        <Footer />
      </>
  );
}